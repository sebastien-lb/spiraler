/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import {
  ISpiralerOptions,
} from './interfaces';

declare global {

  namespace StencilComponents {
    interface MyComponent {
      'first': string;
      'last': string;
    }
  }

  interface HTMLMyComponentElement extends StencilComponents.MyComponent, HTMLStencilElement {}

  var HTMLMyComponentElement: {
    prototype: HTMLMyComponentElement;
    new (): HTMLMyComponentElement;
  };
  interface HTMLElementTagNameMap {
    'my-component': HTMLMyComponentElement;
  }
  interface ElementTagNameMap {
    'my-component': HTMLMyComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-component': JSXElements.MyComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface MyComponentAttributes extends HTMLAttributes {
      'first'?: string;
      'last'?: string;
    }
  }
}


declare global {

  namespace StencilComponents {
    interface MySpiralerEl {

    }
  }

  interface HTMLMySpiralerElElement extends StencilComponents.MySpiralerEl, HTMLStencilElement {}

  var HTMLMySpiralerElElement: {
    prototype: HTMLMySpiralerElElement;
    new (): HTMLMySpiralerElElement;
  };
  interface HTMLElementTagNameMap {
    'my-spiraler-el': HTMLMySpiralerElElement;
  }
  interface ElementTagNameMap {
    'my-spiraler-el': HTMLMySpiralerElElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-spiraler-el': JSXElements.MySpiralerElAttributes;
    }
  }
  namespace JSXElements {
    export interface MySpiralerElAttributes extends HTMLAttributes {

    }
  }
}


declare global {

  namespace StencilComponents {
    interface MySpiraler {
      'current': number;
      'options': ISpiralerOptions;
      'wheelSensitivity': number;
    }
  }

  interface HTMLMySpiralerElement extends StencilComponents.MySpiraler, HTMLStencilElement {}

  var HTMLMySpiralerElement: {
    prototype: HTMLMySpiralerElement;
    new (): HTMLMySpiralerElement;
  };
  interface HTMLElementTagNameMap {
    'my-spiraler': HTMLMySpiralerElement;
  }
  interface ElementTagNameMap {
    'my-spiraler': HTMLMySpiralerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'my-spiraler': JSXElements.MySpiralerAttributes;
    }
  }
  namespace JSXElements {
    export interface MySpiralerAttributes extends HTMLAttributes {
      'current'?: number;
      'options'?: ISpiralerOptions;
      'wheelSensitivity'?: number;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }

export declare function defineCustomElements(window: any): void;